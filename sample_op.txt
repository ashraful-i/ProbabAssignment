import pandas as pd
from PIL import Image
import numpy as np
from pprint import pprint
from os import listdir
from os.path import isfile, join


def train(df):
    # print(df)
    prob_B = pd.DataFrame()
    prob_G = pd.DataFrame(columns=["p_g"])
    prob_R = pd.DataFrame(columns=["p_r"])
    total_p = pd.DataFrame(columns=["p_r"])
    count_row = df.shape[0]
    total_prob = count_row / 16386810

    df_B_Skin = pd.crosstab(df.B, df.Skin, normalize='columns')
    df_Skin_B = pd.crosstab(df.Skin, df.B, normalize='columns')
    df_G_Skin = pd.crosstab(df.G, df.Skin, normalize='columns')
    df_Skin_G = pd.crosstab(df.Skin, df.G, normalize='columns')
    df_R_Skin = pd.crosstab(df.R, df.Skin, normalize='columns')
    df_Skin_R = pd.crosstab(df.Skin, df.R, normalize='columns')
    print(df_Skin_B)
    print(df_B_Skin[1][100])
    total_p_b = df_B_Skin / total_prob
    print(total_p_b)
    im = Image.open('man3.jpg')  # Can be many different formats.
    pix = im.load()
    print(im.size)  # Get the width and hight of the image for iterating over
    im_w = im.size[0]
    im_h = im.size[1]

    for x in range(im_w):
        for y in range(im_h):
            R = pix[x, y][0]
            G = pix[x, y][1]
            B = pix[x, y][2]

            sum_of_2 = df_B_Skin[1][B] + df_G_Skin[1][G] + df_R_Skin[1][R]
            if sum_of_2 > 0.015:
                pix[x, y] = (0, 0, 0)

    im.save('mask2.png')  # Save the modified pixels as .png


def calc_prob(df_prob):
    # prob = pd.DataFrame()

    df_prob['ProbB'] = df_prob['B'] / df_prob['B'].sum()
    df_prob['ProbR'] = df_prob['R'] / df_prob['R'].sum()
    df_prob['ProbG'] = df_prob['G'] / df_prob['G'].sum()
    w, h, v = 255, 255, 255
    Matrix = [[[0 for x in range(w)] for y in range(h)] for z in range(v)]

    print(df_prob)
    return df_prob


def read_image(prob_df: pd.DataFrame):
    print("df1")
    print(prob_df)
    im = Image.open('man3.jpg')  # Can be many different formats.
    pix = im.load()
    print(im.size)  # Get the width and hight of the image for iterating over
    im_w = im.size[0]
    im_h = im.size[1]

    for x in range(im_w):
        for y in range(im_h):
            R = pix[x, y][0]
            G = pix[x, y][1]
            B = pix[x, y][2]
            df1 = prob_df.loc[(prob_df['B'] == B) & (prob_df['G'] == G) & (prob_df['R'] == R), ['total_prob']].any()
            print(df1)
            # print(B, G, R)
            # if(((prob_df['B'] == B) & (prob_df['G'] == G) & (prob_df['R'] == R)).any()):
            #    pix[x, y] = (0, 0, 0)
            # print(prob_df.loc[(prob_df['B'] == B) & (prob_df['G'] == G) & (prob_df['R'] == R), ['total_prob']])
            # print(prob_df.loc[(prob_df['B'] == int(B)) & (prob_df['G'] == int(G)) & (prob_df['R'] == int(R)), ['total_prob']])
            '''
                try:
                    if (prob_df['B'] == int(B)) & (prob_df['G'] == int(G)) & (prob_df['R'] == int(R)):
                        print("hi")
                        pix[x, y] = (0, 0, 0)
                except KeyError:
                    continue
                '''
    print("look")
    # print(prob_df.loc[(prob_df['B'] == 253) & (prob_df['G'] == 255) & (prob_df['R']== 255), ['total_prob']])
    # print((prob_df['B'] == 253) & (prob_df['G'] == 255) & (prob_df['R'] == 255))
    # print(prob_df['ProbB'][0.000004][0.000006])
    im.save('mask3.bmp')

def calc_prob_n(R, G, B, Red, Green, Blue):
    #prob = sample / total_skin
    prob = ((R[Red])/(255*255*255))*((G[Green])/(255*255*255))* ((B[Blue])/(255*255*255))
    return prob

def read_img_rgb(R, G, B):
    #test_path = "D:\ibtd\ibtd\Test"
    #test_images = [f for f in listdir(test_path) if isfile(join(test_path, f))]


    im = Image.open('man3.jpg')  # Can be many different formats.
    pix = im.load()
    print(im.size)  # Get the width and hight of the image for iterating over
    im_w, im_h = im.size

    for x in range(im_w):
        for y in range(im_h):
            Red = pix[x, y][0]
            Green = pix[x, y][1]
            Blue = pix[x, y][2]
            #pix[x, y] = (0, 0, 0)
            prob_pixel = calc_prob_n(R, G, B, Red, Green, Blue)
            print(prob_pixel)
            #sample[x][y] = prob_pixel
            if(prob_pixel>2.4910684961031468e-08):
                #print(prob_pixel)
                pix[x, y] = (0, 0, 0)
    print("look")
    #print(sample)
    im.save('mask3.jpg')

if __name__ == "__main__":
    # dataset = pd.read_csv('Skin_NonSkin.txt', sep='\t', names=['B', 'G', 'R', 'Skin', ])
    # df = pd.DataFrame(dataset)
    # train(df)

    mypath = "D:\ibtd\ibtd\Mask"
    # path1 = "\ibtd"
    maskImages = [f for f in listdir(mypath) if isfile(join(mypath, f))]
    # df_im = pd.DataFrame()
    cols = ['B', 'G', 'R', 'Skin']
    init_val = []

    '''for x in range(255):
        for y in range(255):
            for z in range(255):
                init_val.append([x,y,z,2])'''
    # df1 = pd.DataFrame(init_val, columns=cols)
    cols = ['B', 'G', 'R', 'Skin']
    # lst = []
    R = [0 for x in range(256)]
    G = [0 for x in range(256)]
    B = [0 for x in range(256)]
    sample = [[[0 for x1 in range(256)] for y1 in range(256)] for z1 in range(256)]
    for maskimg in maskImages:
        # print(maskimg)
        im = Image.open(mypath + "\\" + maskimg)
        pix = im.load()
        # print(im.size)  # Get the width and hight of the image for iterating over
        im_w = im.size[0]
        im_h = im.size[1]
        # print(im_h, im_w)
        total_skin = 0
        for x in range(im_w):
            for y in range(im_h):
                Blue = pix[x, y][0]
                Green = pix[x, y][1]
                Red = pix[x, y][2]
                # df1.loc[df1['B'] == B, df1['G'] == G, df1['R'] == R, 'Skin'] = 1
                # df1.at[B, G, R, 'Skin'] = 1

                # if(R > 250 and G>250 or B > 250):
                #    continue
                if (R == 255 and G == 255 and B > 250):
                    continue
                # print(R, G, B)
                else:
                    # calculation
                    # lst.append([R, G, B, 1])
                    #sample[Red][Green][Blue]+=1
                    R[Red] += 1
                    G[Green] += 1
                    B[Blue] += 1
                    total_skin += 1

    #print(R, G, B)
    #R = [16488, 6750, 7505, 7720, 7656, 7966, 8324, 8944, 10066, 11167, 12665, 14354, 16750, 19943, 22908, 27082, 30862, 34485, 37314, 38192, 39260, 40635, 40898, 41326, 41770, 43310, 44444, 46486, 48394, 50509, 53067, 55699, 58432, 61213, 64501, 66934, 69722, 72985, 75603, 77680, 79830, 82935, 84920, 87170, 90108, 91817, 95118, 97029, 99157, 101002, 102622, 104644, 106455, 108325, 110916, 112011, 114034, 115378, 117349, 120441, 122123, 123458, 126158, 128355, 131022, 134674, 136367, 140407, 141842, 144071, 146806, 148141, 150116, 152402, 152509, 153492, 154678, 155096, 157380, 157979, 158648, 160225, 161062, 161820, 161977, 162553, 163579, 165261, 165436, 166136, 167706, 168749, 169210, 169319, 169051, 169896, 171321, 169756, 171683, 170052, 169631, 170363, 168070, 168233, 167745, 166320, 164863, 164938, 163955, 162700, 161616, 161738, 159147, 157544, 155474, 155144, 152988, 151717, 150518, 149227, 147099, 145385, 144570, 141064, 139236, 138055, 137281, 135371, 134096, 132006, 132543, 129521, 128007, 127133, 123372, 121002, 118890, 117869, 115297, 114196, 111404, 109551, 108512, 105762, 105215, 104281, 102127, 101021, 100274, 98333, 97474, 96076, 94754, 92819, 91809, 91250, 89451, 89123, 86570, 86225, 84180, 83901, 80831, 80501, 79246, 78108, 78331, 75618, 75911, 73872, 71977, 71766, 70070, 69384, 69312, 67962, 68217, 68275, 66235, 65049, 63840, 60953, 60445, 60071, 58944, 57717, 57044, 55235, 54489, 51426, 50469, 49533, 47556, 46655, 46466, 45247, 41278, 41022, 37915, 37198, 35808, 33324, 32377, 30801, 29583, 29847, 27020, 25980, 24936, 22705, 21804, 21051, 19776, 19967, 17919, 17049, 16347, 15803, 14626, 13844, 13515, 13241, 13335, 12041, 12058, 11532, 11400, 11583, 10631, 11075, 10920, 10096, 10734, 10689, 10729, 10684, 11826, 12884, 11742, 16718, 14530, 23747, 20464, 35134, 43363, 30003, 68755, 49542, 120845, 94739, 224380, 310943, 170898, 503100, 235531, 79887036]
    #G = [70, 21, 25, 39, 54, 68, 72, 89, 104, 150, 211, 294, 452, 711, 979, 1450, 1811, 2059, 2405, 2629, 3028, 3474, 4272, 5293, 6491, 7218, 7681, 9340, 10735, 11449, 12477, 12939, 13469, 14187, 15016, 15518, 16036, 16744, 17289, 18095, 18270, 18959, 20112, 21124, 22653, 23521, 25140, 26602, 28325, 29992, 31846, 32930, 34034, 35467, 36261, 38055, 39084, 40653, 41977, 43107, 44246, 46204, 47858, 49292, 51050, 52861, 54091, 55777, 57437, 59445, 61567, 62382, 64451, 66001, 67464, 68520, 69896, 72104, 73286, 75421, 77283, 78732, 80512, 81832, 83827, 85101, 86559, 89013, 90499, 92904, 95062, 96971, 99117, 101331, 103172, 104524, 106566, 108354, 110580, 112907, 115573, 118520, 121042, 123406, 125961, 128397, 130992, 133466, 135166, 136837, 139141, 139406, 141890, 143878, 145096, 146844, 147178, 149629, 150473, 151729, 153580, 153993, 155035, 156393, 157559, 158747, 158376, 159072, 159719, 160258, 161034, 162049, 162272, 162400, 163242, 162694, 163418, 163271, 163810, 163787, 164571, 165001, 165148, 165937, 165652, 165316, 166236, 165892, 166182, 166299, 166116, 167151, 166445, 165810, 164974, 164993, 165086, 165506, 164212, 164552, 164909, 162894, 163408, 162857, 159395, 157207, 154993, 153141, 149761, 148420, 146420, 144833, 143283, 140042, 139387, 137136, 137009, 133954, 133183, 131600, 130625, 128800, 127476, 124330, 121639, 119250, 117017, 114441, 113035, 112274, 109113, 108060, 106969, 104352, 101099, 99196, 97968, 94841, 92616, 91254, 88636, 87283, 86745, 85728, 84708, 82584, 81189, 78836, 76939, 74649, 72651, 70864, 72003, 70240, 68832, 65145, 60759, 58236, 56788, 53772, 52548, 51974, 48762, 46077, 45946, 41925, 39798, 38571, 37029, 36125, 34358, 32546, 31018, 28081, 26304, 24933, 23307, 21129, 19967, 17865, 17330, 15720, 15482, 13842, 14088, 15510, 18329, 24639, 36881, 60448, 103699, 180113, 302250, 486283, 802552, 79867630]
    #B = [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 3, 3, 5, 1, 5, 5, 15, 12, 25, 32, 55, 93, 83, 118, 171, 202, 235, 259, 252, 303, 294, 401, 403, 520, 580, 677, 771, 736, 772, 933, 996, 974, 1142, 1367, 1486, 1709, 2050, 2231, 2609, 2881, 3329, 3870, 4449, 4362, 5243, 5457, 5767, 6296, 6432, 6480, 6973, 7286, 7388, 7656, 8131, 8365, 8696, 8991, 9197, 9450, 9766, 10169, 10324, 10561, 11032, 11591, 11825, 12061, 12568, 12918, 13487, 14109, 14374, 14830, 15396, 15850, 16516, 16959, 17234, 17748, 17665, 18394, 18723, 19374, 20300, 20411, 21628, 21873, 22504, 23003, 23974, 24272, 24992, 25476, 26261, 26509, 26964, 28011, 28493, 29176, 30371, 30853, 32047, 32254, 33340, 33869, 34566, 35576, 36086, 37324, 38044, 39159, 39847, 40653, 41753, 42764, 44707, 45747, 47344, 48823, 50053, 51216, 53129, 53644, 54633, 55765, 57093, 58568, 60301, 61864, 63279, 64143, 65412, 67572, 69576, 70609, 72550, 73782, 75548, 77740, 79217, 81065, 82356, 85052, 87627, 89937, 91550, 93485, 96063, 98349, 101872, 104081, 106589, 109178, 111648, 113376, 115307, 118105, 120135, 122163, 125391, 127295, 130575, 134379, 136495, 140030, 142458, 144912, 146642, 148311, 150612, 152866, 153859, 155366, 156019, 158293, 159384, 160611, 162791, 162928, 163835, 165735, 167031, 169253, 170937, 171005, 173617, 174250, 175803, 176901, 179399, 179928, 182634, 183244, 186209, 188255, 190154, 191955, 193422, 195064, 196974, 197358, 197957, 199426, 199414, 200743, 200647, 200934, 201390, 201616, 204253, 204691, 208535, 209565, 210007, 211771, 214144, 217383, 219903, 220342, 223144, 218656, 218468, 211307, 210096, 208484, 204918, 203361, 204647, 202700, 201123, 198464, 200895, 202542, 203914, 228583, 253834, 294989, 292813, 436022, 557650, 470958, 847856, 80425360]
    #skin_prob = total_skin / (255*255*255)
    read_img_rgb(R, G, B)
    #print(pow(1.41, -10))
    #print(7.700176150042485e-10>5.392450590215266e-10)
    # df1 = pd.DataFrame(lst, columns=cols)
    # print(df1)
    # train(df1)
    # bool_series = df1.duplicated()
    # print(bool_series)
    # prob_df = calc_prob(df1)
    # read_image(prob_df)
